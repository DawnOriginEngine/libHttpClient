name: Linux Build (AMD64 & ARM64)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        architecture: [amd64, arm64]
        include:
          - architecture: amd64
            cmake_arch: x86_64
            cc_arch: x86_64-linux-gnu
          - architecture: arm64
            cmake_arch: aarch64
            cc_arch: aarch64-linux-gnu
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          clang \
          make \
          autoconf \
          automake \
          libtool \
          zlib1g-dev \
          pkg-config \
          git
    
    - name: Set up cross-compilation for ARM64
      if: matrix.architecture == 'arm64'
      run: |
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross
        
        # Set up cross-compilation environment
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
        echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake-toolchain-arm64.cmake" >> $GITHUB_ENV
    
    - name: Create ARM64 CMake toolchain file
      if: matrix.architecture == 'arm64'
      run: |
        cat > cmake-toolchain-arm64.cmake << EOF
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
        
        set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
        set(CMAKE_AR aarch64-linux-gnu-ar)
        set(CMAKE_STRIP aarch64-linux-gnu-strip)
        
        set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
        EOF
    
    - name: Set up native build environment for AMD64
      if: matrix.architecture == 'amd64'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
    
    - name: Cache OpenSSL build
      uses: actions/cache@v4
      with:
        path: |
          Out/**/libcrypto.Linux/
          Out/**/libssl.Linux/
        key: openssl-${{ matrix.architecture }}-${{ matrix.configuration }}-${{ hashFiles('External/openssl/**') }}
        restore-keys: |
          openssl-${{ matrix.architecture }}-${{ matrix.configuration }}-
          openssl-${{ matrix.architecture }}-
    
    - name: Cache cURL build
      uses: actions/cache@v4
      with:
        path: Out/**/libcurl.Linux/
        key: curl-${{ matrix.architecture }}-${{ matrix.configuration }}-${{ hashFiles('External/curl/**') }}
        restore-keys: |
          curl-${{ matrix.architecture }}-${{ matrix.configuration }}-
          curl-${{ matrix.architecture }}-
    
    - name: Build OpenSSL
      run: |
        cd Build/libHttpClient.Linux
        chmod +x openssl_Linux.bash
        
        if [ "${{ matrix.architecture }}" = "arm64" ]; then
          # Modify OpenSSL build script for ARM64 cross-compilation
          sed -i 's/linux-x86_64/linux-aarch64/g' openssl_Linux.bash
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
        fi
        
        ./openssl_Linux.bash -c ${{ matrix.configuration }}
    
    - name: Build cURL
      run: |
        cd Build/libHttpClient.Linux
        chmod +x curl_Linux.bash
        
        if [ "${{ matrix.architecture }}" = "arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export AR=aarch64-linux-gnu-ar
          # Modify cURL build script for ARM64 cross-compilation
          sed -i 's/--host=x86_64-linux-gnu/--host=aarch64-linux-gnu/g' curl_Linux.bash || true
        fi
        
        ./curl_Linux.bash -c ${{ matrix.configuration }}
    
    - name: Build libHttpClient
      run: |
        cd Build/libHttpClient.Linux
        chmod +x libHttpClient_Linux.bash
        
        # Create output directories
        mkdir -p ../../Out/${{ matrix.cmake_arch }}/${{ matrix.configuration }}/libHttpClient.Linux
        mkdir -p ../../Int/CMake/libHttpClient.Linux
        
        if [ "${{ matrix.architecture }}" = "arm64" ]; then
          # Use CMake directly for cross-compilation
          cmake -S . -B ../../Int/CMake/libHttpClient.Linux \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake-toolchain-arm64.cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          make -C ../../Int/CMake/libHttpClient.Linux
        else
          # Use the provided script for AMD64
          ./libHttpClient_Linux.bash -c ${{ matrix.configuration }} -sg
        fi
    
    - name: List build outputs
      run: |
        echo "=== Build Outputs ==="
        find Out -name "*.a" -o -name "*.so" -o -name "*.so.*" 2>/dev/null | head -20 || echo "No libraries found in Out directory"
        
        echo "\n=== CMake Build Directory ==="
        find Int/CMake -name "*.a" -o -name "*.so" -o -name "*.so.*" 2>/dev/null | head -20 || echo "No libraries found in Int/CMake directory"
        
        echo "\n=== All library files ==="
        find . -name "libHttpClient*" -o -name "libssl*" -o -name "libcrypto*" -o -name "libcurl*" 2>/dev/null | grep -E "\.(a|so|so\..*)$" | head -20 || echo "No library files found"
    
    - name: Run basic tests
      if: matrix.architecture == 'amd64'
      continue-on-error: true
      run: |
        echo "=== Running basic library tests ==="
        
        # Check if libraries can be loaded
        for lib in $(find . -name "libHttpClient*.so" 2>/dev/null); do
          echo "Testing library: $lib"
          if ldd "$lib" > /dev/null 2>&1; then
            echo "✓ $lib: Dependencies OK"
          else
            echo "✗ $lib: Dependency issues"
          fi
        done
        
        # Check static libraries
        for lib in $(find . -name "libHttpClient*.a" 2>/dev/null); do
          echo "Checking static library: $lib"
          if ar t "$lib" > /dev/null 2>&1; then
            echo "✓ $lib: Archive OK"
          else
            echo "✗ $lib: Archive issues"
          fi
        done
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libHttpClient-linux-${{ matrix.architecture }}-${{ matrix.configuration }}
        path: |
          Out/**/*.a
          Out/**/*.so
          Out/**/*.so.*
          Int/CMake/**/*.a
          Int/CMake/**/*.so
          Int/CMake/**/*.so.*
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create release package
      if: matrix.configuration == 'Release'
      run: |
        mkdir -p release-package/lib
        mkdir -p release-package/include
        
        # Copy libraries
        find Out Int/CMake -name "*.a" -o -name "*.so" -o -name "*.so.*" | while read lib; do
          cp "$lib" release-package/lib/ 2>/dev/null || true
        done
        
        # Copy headers
        cp -r Include/* release-package/include/ 2>/dev/null || true
        
        # Create archive
        tar -czf libHttpClient-linux-${{ matrix.architecture }}-${{ matrix.configuration }}.tar.gz -C release-package .
    
    - name: Upload release package
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: libHttpClient-linux-${{ matrix.architecture }}-${{ matrix.configuration }}-package
        path: libHttpClient-linux-${{ matrix.architecture }}-${{ matrix.configuration }}.tar.gz
        retention-days: 90