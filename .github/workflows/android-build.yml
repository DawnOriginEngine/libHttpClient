name: Android Build (x86, ARM64)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release

jobs:
  android-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        architecture: [armeabi-v7a, x86, x86_64, arm64-v8a]
        include:
          - architecture: armeabi-v7a
            abi: armeabi-v7a
            target: armv7a-linux-androideabi
          - architecture: x86
            abi: x86
            target: i686-linux-android
          - architecture: x86_64
            abi: x86_64
            target: x86_64-linux-android
          - architecture: arm64-v8a
            abi: arm64-v8a
            target: aarch64-linux-android
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        add-to-path: false
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Cache Android build outputs
      uses: actions/cache@v4
      with:
        path: |
          Build/libHttpClient.Android.Workspace/.gradle
          Binaries/Android
        key: ${{ runner.os }}-android-${{ matrix.architecture }}-${{ matrix.configuration }}-${{ hashFiles('Build/**/*.gradle', 'Build/**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-android-${{ matrix.architecture }}-
          ${{ runner.os }}-android-
    
    - name: Set Android environment variables
      run: |
        echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
    
    - name: Make gradlew executable
      run: chmod +x Build/libHttpClient.Android.Workspace/gradlew
    
    - name: Build libcrypto for ${{ matrix.architecture }}
      run: |
        cd Build/libHttpClient.Android.Workspace
        ./gradlew :libcrypto.Android:assemble${{ matrix.configuration }} \
          -PANDROID_ABI=${{ matrix.abi }} \
          -PANDROID_PLATFORM=android-21 \
          --info
    
    - name: Build libssl for ${{ matrix.architecture }}
      run: |
        cd Build/libHttpClient.Android.Workspace
        ./gradlew :libssl.Android:assemble${{ matrix.configuration }} \
          -PANDROID_ABI=${{ matrix.abi }} \
          -PANDROID_PLATFORM=android-21 \
          --info
    
    - name: Build libHttpClient for ${{ matrix.architecture }}
      run: |
        cd Build/libHttpClient.Android.Workspace
        ./gradlew :libHttpClient.Android:assemble${{ matrix.configuration }} \
          -PANDROID_ABI=${{ matrix.abi }} \
          -PANDROID_PLATFORM=android-21 \
          --info
    
    - name: List build outputs
      run: |
        echo "=== Build outputs for ${{ matrix.architecture }} ${{ matrix.configuration }} ==="
        find Binaries/Android -name "*.so" -o -name "*.a" | head -20
        echo "\n=== Directory structure ==="
        ls -la Binaries/Android/ || echo "Binaries directory not found"
        find Build/libHttpClient.Android.Workspace -name "*.so" -o -name "*.a" | head -10
    
    - name: Verify build artifacts
      run: |
        echo "=== Verifying ${{ matrix.architecture }} libraries ==="
        
        # Check for libHttpClient
        if find . -name "*libHttpClient*" -type f \( -name "*.so" -o -name "*.a" \) | grep -q "${{ matrix.abi }}"; then
          echo "✓ libHttpClient found for ${{ matrix.abi }}"
          find . -name "*libHttpClient*" -type f \( -name "*.so" -o -name "*.a" \) | grep "${{ matrix.abi }}" | head -3
        else
          echo "✗ libHttpClient not found for ${{ matrix.abi }}"
        fi
        
        # Check for OpenSSL libraries
        if find . -name "*ssl*" -type f \( -name "*.so" -o -name "*.a" \) | grep -q "${{ matrix.abi }}"; then
          echo "✓ OpenSSL libraries found for ${{ matrix.abi }}"
          find . -name "*ssl*" -type f \( -name "*.so" -o -name "*.a" \) | grep "${{ matrix.abi }}" | head -3
        else
          echo "✗ OpenSSL libraries not found for ${{ matrix.abi }}"
        fi
        
        if find . -name "*crypto*" -type f \( -name "*.so" -o -name "*.a" \) | grep -q "${{ matrix.abi }}"; then
          echo "✓ Crypto libraries found for ${{ matrix.abi }}"
          find . -name "*crypto*" -type f \( -name "*.so" -o -name "*.a" \) | grep "${{ matrix.abi }}" | head -3
        else
          echo "✗ Crypto libraries not found for ${{ matrix.abi }}"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-${{ matrix.architecture }}-${{ matrix.configuration }}-libs
        path: |
          Binaries/Android/**/*.so
          Binaries/Android/**/*.a
          Build/libHttpClient.Android.Workspace/**/build/intermediates/cmake/**/*.so
          Build/libHttpClient.Android.Workspace/**/build/intermediates/cmake/**/*.a
        retention-days: 7
    
    - name: Create release package (Release only)
      if: matrix.configuration == 'Release'
      run: |
        mkdir -p release-package/android-${{ matrix.architecture }}
        
        # Copy libraries
        find . -name "*.so" -o -name "*.a" | grep "${{ matrix.abi }}" | while read file; do
          cp "$file" release-package/android-${{ matrix.architecture }}/
        done
        
        # Copy headers
        cp -r Include release-package/
        
        # Create archive
        cd release-package
        tar -czf ../libHttpClient-android-${{ matrix.architecture }}-${{ matrix.configuration }}.tar.gz .
    
    - name: Upload release package
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: libHttpClient-android-${{ matrix.architecture }}-release
        path: libHttpClient-android-${{ matrix.architecture }}-${{ matrix.configuration }}.tar.gz
        retention-days: 30

  android-test:
    runs-on: ubuntu-latest
    needs: android-build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download armeabi-v7a artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-armeabi-v7a-Release-libs
        path: artifacts/armeabi-v7a
    
    - name: Download x86 artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-x86-Release-libs
        path: artifacts/x86
    
    - name: Download x86_64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-x86_64-Release-libs
        path: artifacts/x86_64
    
    - name: Download ARM64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-arm64-v8a-Release-libs
        path: artifacts/arm64
    
    - name: Verify artifacts
      run: |
        echo "=== armeabi-v7a artifacts ==="
        find artifacts/armeabi-v7a -type f | head -10
        
        echo "\n=== x86 artifacts ==="
        find artifacts/x86 -type f | head -10
        
        echo "\n=== x86_64 artifacts ==="
        find artifacts/x86_64 -type f | head -10
        
        echo "\n=== ARM64 artifacts ==="
        find artifacts/arm64 -type f | head -10
        
        echo "\n=== File analysis ==="
        for arch in armeabi-v7a x86 x86_64 arm64; do
          echo "--- $arch libraries ---"
          find artifacts/$arch -name "*.so" | while read file; do
            echo "File: $file"
            file "$file" 2>/dev/null || echo "Could not analyze file"
          done
        done